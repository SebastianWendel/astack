#!/bin/bash
#-----------------------------------------------------------------------------------------------------
# File:         atlassian-astack
# Description:  install, update and backup atlassian products
# Plattform:    Red-Hat, CentOS, Debian, Ubuntu
# Created:      01.09.2012
# Author:       Sebastian Wendel, evobyte IT-Services, Hamburg/Germany
# License:      Apache License, Version 2.0
#-----------------------------------------------------------------------------------------------------

#-----------------------------------------------------------------------------------------------------
# ToDos:
#-----------------------------------------------------------------------------------------------------
# /atlassian/atlassian.sh -p && aptitude purge -y mysql-server && rm -rf /var/lib/mysql/
# * restore procedure
# * appserver memory calculation
# * jira proxy path issue
# refactore with application context /
# add logrotade script
# full usage output
# add script banner
# check free memory space
# add support for bamboo
# add support for fisheye
# add support for crucible
# check if exists add partitial install
# domain parameters
# application parameteres
# check 32bit distributions
# check redhat distributions
# check debian distributions
# test single application install

#-----------------------------------------------------------------------------------------------------
# configuration (only this section can be changed)
#-----------------------------------------------------------------------------------------------------
APPS="crowd confluence jira stash"
PATH_DEST="/opt"
PATH_DATA="${PATH_DEST}/data"
PATH_BACKUP="${PATH_DEST}/backup"
TEMP="/tmp"
LOG_FILE="astack.log"
LOG_LEVEL='INFO'
DOMAIN='example.org'
MAXBACKUPS=14

#-----------------------------------------------------------------------------------------------------
# script usage
#-----------------------------------------------------------------------------------------------------
USAGE="USAGE: ${0} [OPTIONS]...

-d --debug:    gibt eine detaillierte Ausgebe zur verarbeitung des Skripts aus
-h -? --help:  gibt diesen Hilfetext aus.

Exit status:
 0  if OK,
 1  if minor problems.\n\n"

ERROR="FEHLER: Ein oder mehrere Vorraussetzungen wurden nicht erfÃ¼llt!\n"

#-----------------------------------------------------------------------------------------------------
# script behavior
#-----------------------------------------------------------------------------------------------------
#set -o nounset
#set -o errexit

# SET OUTPUT REDIRECTION
exec > >(tee -a ${LOG_FILE}) 2>&1

#-----------------------------------------------------------------------------------------------------
# variable
#-----------------------------------------------------------------------------------------------------
TIMESTAMP=$(date +%Y%m%d%H%M%S)
JOB_UPDATE=0
JOB_INSTALL=0
JOB_BACKUP=0
JOB_RESTORE=0
JOB_PURGE=0
VERSION_NOW=0
VERSION_UPDATE=0
PKG_DEBIAN="git xmlstarlet"
PKG_REDHAT=""
ALT_URLS=0

#-----------------------------------------------------------------------------------------------------
# control structure
#-----------------------------------------------------------------------------------------------------
if [ $# -gt 0 ] ; then
  while true ; do
    case $1 in
      -u|--update)      JOB_UPDATE=1 ;;
      -i|--install)     JOB_INSTALL=1 ;;
      -b|--backup)      JOB_BACKUP=1 ;;
      -r|--restore)     JOB_RESTORE=1 ;;
      -p|--purge)       JOB_PURGE=1 ;;
      -x|--destination) shift; PATH_DEST=$1 ;;
      -a|--alt-urls)    ALT_URLS=1 ;;
      -d|--debug)       shift; LOG_LEVEL='DEBUG' ;;
      -v|--verbose)     shift; set -x ;;
      -h|-?|--help)     printf "${USAGE}"; exit ;;
      *)                printf "\nERROR: Unknown Option \"$1\" !\n"; printf "\n${USAGE}"; exit 1;;
    esac
    shift
    [ $# -eq 0 ] && break
  done
fi
#if [ "${JOB_UPDATE}" == "0" ] && [ "${JOB_INSTALL}" == "0" ] && [ "${JOB_PURGE}" == "0" ] ; then
#  printf "${ERROR}"
#  exit 1
#fi

#-----------------------------------------------------------------------------------------------------
# environment
#-----------------------------------------------------------------------------------------------------

# GET WORKING DIRECTORY
SCRIPT="$0"
while [ -h "$SCRIPT" ] ; do
  ls=$(ls -ld "$SCRIPT")
  link=$(expr "$ls" : '.*-> \(.*\)$')
  if expr "$link" : '/.*' > /dev/null; then
    SCRIPT="$link"
  else
    SCRIPT=$(dirname "$SCRIPT")/"$link"
  fi
done
MD_HOME=$(dirname "$SCRIPT")/..
export MD_HOME=$(cd $MD_HOME; pwd)

# GET DISTRIBUTION TYPE
if [ -f /etc/lsb-release ]; then
  . /etc/lsb-release
  DISTRO=$DISTRIB_ID
elif [ -f /etc/debian_version ]; then
  DISTRO=debian
elif [ -f /etc/redhat-release ]; then
  DISTRO="redhat"
else
  DISTRO=$(uname -s)
  exit 1
fi

# GET KERNEL ARCHITECTURE
case $(uname -m) in
  x86_64)
    ARCH=64
    ;;
  i*86)
    ARCH=32
    ;;
  *)
    ARCH=?
    ;;
esac

if [ "$(id -u)" != "0" ]; then
  echo "This script must be run as root, script will exit!" 1>&2
  exit 1
fi

# CHECK IF SCRIPT IS ALREADY RUNNING
if [ $(pgrep $(basename $0) | wc -l) -gt 2 ]; then
  echo "This script is already running, script will exit now."
  exit
fi

#-----------------------------------------------------------------------------------------------------
# functions
#-----------------------------------------------------------------------------------------------------
function logger() {
  TIME_STAMP=$(date +'%Y-%m-%d %T')
  if [ ${1} == "INFO" ] || [ ${1} == "ERROR" ]; then
    echo -e "[${TIME_STAMP}] [${1}]\t${2}"
  elif [ ${LOG_LEVEL} == "DEBUG" ]; then
    echo -e "[${TIME_STAMP}] [${1}]\t${2}"
  fi
}

function checkFilesystem() {
  FILESYSTEM_SPACE=$(df ${PATH_DEST} | grep -vE '^Filesystem|tmpfs|cdrom' | awk '{print $4}')
  if [ ${FILESYSTEM_SPACE} -lt 1024000 ] ; then
    logger ERROR "There is not enothe filesystem space to procedure, script will exit!"
    exit 1
  else 
    logger DEBUG "There is ${FILESYSTEM_SPACE}kb space left on your destination directory ${PATH_DEST}."
  fi
}

function checkMemoryusage() {
  MEM_FREE=$(free | grep Mem | awk '{print $4}')
  APPS_NUM=$(echo ${APPS} | wc -w)
  MEM_APP=$(echo "${MEM_FREE} / ${APPS_NUM}" | bc)
  if [ ${MEM_APP} -lt 262144 ] ; then
    logger ERROR "There is not enothe system memory avalable to to procedure, script will exit!"
    exit 1
  else 
    logger DEBUG "There is ${MEM_FREE}kb system memory avalable."
  fi
}

function checkNetwork() {
  if wget -qO- --tries=10 --timeout=5 http://www.evobyte.de/$(basename $0) &> /dev/null ; then
    logger DEBUG "Successfully checkt network connection."
  else
    logger ERROR "Please check the internet configuration, something went wrong!"
    exit 1
  fi
}

function installTools() {
  if [ ${DISTRO} == "Ubuntu" ] || [ ${DISTRO} == "debian" ] ; then
    for PKG in ${PKG_DEBIAN} ; do
      if ! dpkg -s ${PKG} &> /dev/null ; then
        apt-get update &> /dev/null
        if apt-get install -y ${PKG} &> /dev/null ; then
          logger DEBUG "Successfully installed tool \"${PKG}\"."
        else
          logger ERROR "Can't install tool \"${PKG}\", please check logfiles."
        fi
      else
        logger DEBUG "Tool \"${PKG}\" is alredy installed."
      fi
    done
  fi
}

function installApache() {
  if [ ${DISTRO} == "Ubuntu" ] || [ ${DISTRO} == "debian" ] ; then
    if ! dpkg -s apache2 &> /dev/null ; then 
      apt-get update &> /dev/null
      if apt-get install -y apache2 &> /dev/null ; then
        logger DEBUG "Successfully installed Apache Web-Server."
      else
        logger ERROR "Can't install Apache Web-Server, please check logs."
      fi
    else
      logger DEBUG "Apache Web-server is alredy installed."
    fi
    if a2enmod proxy proxy_http ssl rewrite &> /dev/null ; then
      logger DEBUG "Successfully loaded Apache Web-Server modules."
    else
      logger ERROR "Can't load Apache Web-Server modules, please have a look to the Apache logfiles."
    fi
    if ! grep "NameVirtualHost \*:443" /etc/apache2/ports.conf | grep -v "#" &> /dev/null ; then
      echo "NameVirtualHost *:443" >> /etc/apache2/ports.conf
      logger DEBUG "Successfully added \"NameVirtualHost *:443\" to Apache Web-Server config."
    else
      logger DEBUG "\"NameVirtualHost *:443\" is already in Apache Web-Server config."
    fi
    if service apache2 restart &> /dev/null ; then
      logger DEBUG "Successfully restarted Apache Web-Server."
    else
      logger ERROR "Can't restarted Apache Web-Server, please have a look to the Apache logfiles."
    fi
  fi
}

function installMySQL() {
  if [ ${DISTRO} == "Ubuntu" ] || [ ${DISTRO} == "debian" ] ; then
    if ! dpkg -s mysql-server &> /dev/null ; then 
      apt-get update &> /dev/null
      if DEBIAN_FRONTEND=noninteractive apt-get install -y mysql-server &> /dev/null ; then
        logger DEBUG "Successfully installed MySQL-Server."
      else 
        logger ERROR "Can't install MySQL-Server, please check logs."
      fi
      export MYSQL_PASS=$(openssl rand -base64 18)
      if mysql -uroot -e "UPDATE mysql.user SET password=PASSWORD('${MYSQL_PASS}') WHERE user='root'; FLUSH PRIVILEGES;"; &> /dev/null ; then
        logger INFO "Successfully set MySQL root password to: \"${MYSQL_PASS}\", please note it will be stored in the Logfile."
      else
        logger ERROR "Can't set MySQL-Server root password, please check logs."
      fi
    else
      logger DEBUG "MySQL-Server is alredy installed."
    fi
  fi
}

function installPostfix() {
  if [ ${DISTRO} == "Ubuntu" ] || [ ${DISTRO} == "debian" ] ; then
    if ! dpkg -s postfix &> /dev/null ; then
      if DEBIAN_FRONTEND=noninteractive apt-get install -y postfix &> /dev/null ; then
        logger DEBUG "Successfully installed Postfix Mail-Server."
      else
        logger ERROR "Can't install Postfix Mail-Server, pleae check logfiles."
      fi
    else
      logger DEBUG "Postfix Mail-Server is alredy installed."
    fi
  fi
}

function deployDriverJDBC() {
  if ! BIN_NAME=$(wget -qO- http://dev.mysql.com/downloads/connector/j/ | grep "<td class=\"sub-text\">(" | grep "tar.gz" | cut -d"(" -f2 | cut -d")" -f1) ; then
    logger ERROR "Can't get MySQL JDBC-Drver Version from \"http://dev.mysql.com/downloads/connector/j/\"."
    exit 1
  fi
  if [ ! -f ${TEMP}/${BIN_NAME} ] ; then
    if wget http://dev.mysql.com/get/Downloads/Connector-J/${BIN_NAME}/from/http://cdn.mysql.com/ -O ${TEMP}/${BIN_NAME} &> /dev/null ; then
      logger DEBUG "Successfully downloaded \"${BIN_NAME}\" to \"${TEMP}\"."
    else
      logger ERROR "Can't download \"${BIN_NAME}\", please check url \"http://dev.mysql.com/get/Downloads/Connector-J/${BIN_NAME}/from/http://cdn.mysql.com/\"."
      exit 1
    fi
    if tar xzf ${TEMP}/${BIN_NAME} -C ${TEMP} &> /dev/null ; then
      logger DEBUG "Successfully uncompress \"${BIN_NAME}\" to \"${TEMP}\"."
    else
      logger ERROR "Can't uncompress \"${BIN_NAME}\"."
      exit 1
    fi
  fi
  if find ${PATH_DEST}/${1} -name mysql-connector-java-*.jar | xargs rm -f &> /dev/null ; then
    logger DEBUG "Successfully deleted old MySQL JDBC-Driver for the application \"${1}\"."
  fi
  if [ ${1} == "crowd" ] ; then
    if cp ${TEMP}/${BIN_NAME%.tar.gz}/${BIN_NAME%.tar.gz}-bin.jar ${PATH_DEST}/${1}/current/apache-tomcat/lib &> /dev/null ; then
      logger DEBUG "Successfully copied \"${BIN_NAME%.tar.gz}-bin.jar\" to \"${PATH_DEST}/${1}/current/apache-tomcat/lib\"."
    fi
    if chown ${1}:${1} ${PATH_DEST}/${1}/current/apache-tomcat/lib/${BIN_NAME%.tar.gz}-bin.jar &> /dev/null ; then
      logger DEBUG "Successfully chowned \"${PATH_DEST}/${1}/current/apache-tomcat/lib/${BIN_NAME%.tar.gz}-bin.jar\" to \"${1}\"."
    fi
  else
    if cp ${TEMP}/${BIN_NAME%.tar.gz}/${BIN_NAME%.tar.gz}-bin.jar ${PATH_DEST}/${1}/current/lib &> /dev/null ; then
      logger DEBUG "Successfully copied \"${BIN_NAME%.tar.gz}-bin.jar\" to \"${PATH_DEST}/${1}/current/lib\"."
    fi
    if chown ${1}:${1} ${PATH_DEST}/${1}/current/lib/${BIN_NAME%.tar.gz}-bin.jar &> /dev/null ; then
      logger DEBUG "Successfully chowned \"${PATH_DEST}/${1}/current/lib/${BIN_NAME%.tar.gz}-bin.jar\" to \"${1}\"."
    fi
  fi
}

function createDatabase() {
  if [ ${DISTRO} == "Ubuntu" ] || [ ${DISTRO} == "debian" ]; then
    if dpkg -s mysql-server &> /dev/null ; then
      if [ ! -n "${MYSQL_PASS}" ]; then
        unset MYSQL_PASS
        PROMPT="Please enter MySQL root password: "
        while IFS= read -p "${PROMPT}" -r -s -n 1 CHAR ; do
          if [[ ${CHAR} == $'\0' ]] ; then
            break
          fi
          PROMPT='*'
          MYSQL_PASS+="${CHAR}"
        done
        echo
        export MYSQL_PASS=${MYSQL_PASS}
      fi
    fi
  fi 
  if ! mysql -u root -p${MYSQL_PASS} -Bse "USE '${1}'" &> /dev/null ; then
    PASSWORD=$(openssl rand -base64 18)
    SQL_CREATE="CREATE DATABASE IF NOT EXISTS ${1} CHARACTER SET utf8 COLLATE utf8_bin;"
    SQL_GRANT="GRANT ALL ON *.* TO '${1}'@'localhost' IDENTIFIED BY '${PASSWORD}';"
    SQL_FLUSH="FLUSH PRIVILEGES;"
    if mysql -u root -p${MYSQL_PASS} -Bse "${SQL_CREATE}${SQL_GRANT}${SQL_FLUSH}" &> /dev/null ; then
      logger INFO "Successfully created database \"${1}\" with password \"${PASSWORD}\""
    fi
  else
    logger INFO "Can't create Database \"${1}\", maybe it alredy exists!"
  fi
}

function createCerts() {
  if [ ${DISTRO} == "Ubuntu" ] || [ ${DISTRO} == "debian" ] ; then
    SSL_FOLDER="/etc/ssl/certs"
  else
    SSL_FOLDER="/etc/ssl/certs" # have to be determined
  fi 
  if [ ! $(which openssl) ] ; then 
    apt-get install -y openssl >/dev/null 2>&1
  fi 
  if [ ! -f ${SSL_FOLDER}/${DOMAIN}.key ] && [ ! -f ${SSL_FOLDER}/${DOMAIN}.pem ] ; then
    openssl genrsa > ${SSL_FOLDER}/${DOMAIN}.key
    openssl req -new -x509 -key ${SSL_FOLDER}/${DOMAIN}.key -out ${SSL_FOLDER}/${DOMAIN}.pem -days 3650
  fi
  if [ -f ${PATH_DEST}/java/current/lib/security/cacerts ] ; then
    ${PATH_DEST}/java/current/bin/keytool -import -trustcacerts -keystore ${PATH_DEST}/java/current/lib/security/cacerts \
                                          -storepass changeit -noprompt \
                                          -alias "${DOMAIN}" -file ${SSL_FOLDER}/${DOMAIN}.pem >/dev/null 2>&1
  fi
}

function createVhost() {
  TOMCAT_CONFIG=$(find ${PATH_DEST}/${1} -name server.xml)
  TOMCAT_PORT=$(xmlstarlet sel -t -m Server/Service/Connector -v @port ${TOMCAT_CONFIG})
  if [ ${ALT_URLS} == 1 ]; then
    echo "test"
  fi
  if [ ${DISTRO} == "Ubuntu" ] || [ ${DISTRO} == "debian" ] ; then
    VHOST_FILE="/etc/apache2/sites-available/${1}"
    SSL_FOLDER="/etc/ssl/certs"
  else
    VHOST_FILE="/etc/httpd/conf.d/${1}"
    SSL_FOLDER="/etc/ssl/certs" # have to be determined
  fi 
  APACHE_LOG_DIR='${APACHE_LOG_DIR}'
  cat > ${VHOST_FILE} << EOF
<VirtualHost *:80>
  ServerName        ${1}.${DOMAIN}
  ServerAdmin       webmaster@${DOMAIN}
  ServerSignature   Off
 
  ErrorLog          ${APACHE_LOG_DIR}/${1}_error.log
  CustomLog         ${APACHE_LOG_DIR}/${1}_access.log combined
  LogLevel          warn
 
  RewriteEngine     On
  RewriteCond       %{HTTPS} off
  RewriteRule       (.*) https://%{HTTP_HOST}%{REQUEST_URI}
</VirtualHost>
 
<VirtualHost *:443>
  ServerName        ${1}.${DOMAIN} 
  ServerAdmin       webmaster@${DOMAIN}
  ServerSignature   Off
 
  SSLEngine         On
  SSLProtocol       -all +SSLv3 +TLSv1
  SSLCipherSuite    SSLv3:+HIGH:+MEDIUM
  SSLCertificateFile ${SSL_FOLDER}/${DOMAIN}.pem
  SSLCertificateKeyFile ${SSL_FOLDER}/${DOMAIN}.key
 
  ErrorLog          ${APACHE_LOG_DIR}/${1}_error.log
  CustomLog         ${APACHE_LOG_DIR}/${1}_access.log combined
  LogLevel          warn

  RewriteEngine     On
  RewriteLogLevel   0
  RewriteLog        ${APACHE_LOG_DIR}/${1}_rewrite.log
  RewriteRule       ^/?$ https://%{HTTP_HOST}/${1}/ [R,L]

  ProxyRequests     Off
  ProxyPreserveHost On
   
  <Proxy *>
    Order deny,allow
    Allow from all
  </Proxy>
        
  ProxyPass         /${1} http://0.0.0.0:${TOMCAT_PORT}/${1}
  ProxyPassReverse  /${1} http://0.0.0.0:${TOMCAT_PORT}/${1}

  <Location /${1}>
    Order allow,deny
    Allow from all
  </Location>
</VirtualHost>
EOF
  if [ ${DISTRO} == "Ubuntu" ] || [ ${DISTRO} == "debian" ] ; then
    a2ensite ${1} >/dev/null 2>&1
    a2dissite default default-ssl >/dev/null 2>&1
    service apache2 reload >/dev/null 2>&1
  else
    service httpd reload >/dev/null 2>&1
  fi
}

function purgeVhost() {
  if [ ${DISTRO} == "Ubuntu" ] || [ ${DISTRO} == "debian" ] ; then
    a2dissite ${1} >/dev/null 2>&1
    rm -f /etc/apache2/sites-available/${1} >/dev/null 2>&1
    service apache2 reload >/dev/null 2>&1
  else
    rm -f /etc/apache2/sites-available/${1} >/dev/null 2>&1
    service httpd reload >/dev/null 2>&1
  fi 
}

function createFolders() {
  if [ ! -d ${PATH_DEST}/${1} ] ; then
    mkdir -p ${PATH_DEST}/${1}
  fi
  if [ ! -d ${PATH_DATA} ] ; then
    mkdir -p ${PATH_DATA}
  fi
  if [ ! -d ${PATH_BACKUP} ] ; then
    mkdir -p ${PATH_BACKUP}
  fi
}

function purgeFolders() {
  if [ -d ${PATH_DEST}/${1} ] ; then
    rm -rf ${PATH_DEST}/${1}
  fi
  if [ -d ${PATH_DATA} ] ; then
    rm -rf ${PATH_DATA}
  fi
}

function createCredentials() {
  id -u ${1} > /dev/null 2>&1
  if [ $? -eq 1 ] ; then
    groupadd ${1}
    useradd -s /bin/bash -r -m -g ${1} -d ${PATH_DATA}/${1} ${1}
  fi
}

function setEnvirement() {
  if [ -f "${PATH_DATA}/${1}/.profile" ] ; then
    if ! grep JAVA_HOME "${PATH_DATA}/${1}/.profile" >/dev/null 2>&1 ; then
      echo "export JAVA_HOME=${PATH_DEST}/java/current" >> "${PATH_DATA}/${1}/.profile"
      echo "export PATH=$PATH:${PATH_DEST}/java/current/bin" >> "${PATH_DATA}/${1}/.profile"
      if [ ${1} == "stash" ] ; then
        echo "export STASH_HOME=${PATH_DATA}/${1}" >> "${PATH_DATA}/${1}/.profile"
      fi
    fi
  fi
}

function purgeCredentials() {
  id -u ${1} >/dev/null 2>&1
  if [ $? -eq 0 ] ; then
    userdel -f ${1} >/dev/null 2>&1
  fi
}

function purgeJava() {
  if [ -d "${PATH_DEST}/java" ] ; then
    rm -rf "${PATH_DEST}/java"
  fi
}

function stopApp() {
  PID=$(ps -ef | grep ${1} | grep -v "grep" | awk '{print $2}')
  if [ ! "x${PID}" == "x" ] ; then
    while ps ef ${PID} >/dev/null 2>&1 ; do
      kill ${PID} >/dev/null 2>&1
      sleep 2
    done
  fi
}

function startApp() {
  PID=$(ps -ef | grep ${1} | grep -v "grep" | awk '{print $2}')
  if [ "x${PID}" == "x" ] ; then
    SCRIPT_START=$(find ${PATH_DEST}/${1}/current/ -name startup.sh)
    su ${1} -l -c "${SCRIPT_START} &> /dev/null"
  fi
}

function deployLatestJava() {
  if [ ! -d "${PATH_DEST}/java" ] ; then
    mkdir "${PATH_DEST}/java"
  fi
  if [ ${ARCH} -eq 64 ] ; then
    DOWNLOAD=$(wget -qO- http://www.java.com/en/download/manual.jsp | \
               grep "title=\" Download Java software for Linux x64\" href" | \
               grep -v RPM | uniq | awk -F"href=\"" '{print $2}' | \
               awk -F"\" onclick" '{print $1}')
  elif [ ${ARCH} -eq 32 ] ; then
    DOWNLOAD=$(wget -qO- http://www.java.com/en/download/manual.jsp | \
               grep "title=\" Download Java software for Linux\" href" | \
               grep -v RPM | uniq | awk -F"href=\"" '{print $2}' | \
               awk -F"\" onclick" '{print $1}')
  fi
  if [ -f ${TEMP}/jre-linux.tar.gz ] ; then
    rm -f ${TEMP}/jre-linux.tar.gz
  fi
  wget ${DOWNLOAD} -O ${TEMP}/jre-linux.tar.gz >/dev/null 2>&1
  JAVA_VERSION=$(gunzip -c ${TEMP}/jre-linux.tar.gz | tar t | head -1 | cut -d"/" -f1)
  if [ ! -d ${PATH_DEST}/java/${JAVA_VERSION} ] ; then
    tar -xzf ${TEMP}/jre-linux.tar.gz -C "${PATH_DEST}/java" >/dev/null 2>&1
    ln -fs ${PATH_DEST}/java/${JAVA_VERSION} ${PATH_DEST}/java/current
    chown -R root:root ${PATH_DEST}/java/current/
  fi
  rm -f ${TEMP}/jre-linux.tar.gz
}

function deployLatestBin() {
  BIN_URL=$(wget -qO- https://my.atlassian.com/download/feeds/current/${1}.json | \
            grep -Po '"zipUrl":.*?[^\\]",'  | \
            grep tar.gz | \
            grep -v cluster | \
            grep -v "\-war." | \
            cut -d"\"" -f4)
  FILE_NAME=$(echo ${BIN_URL} | cut -d"/" -f8 )
  FOLDER_NAME=${FILE_NAME%.tar.gz}
  if [ ! -f ${TEMP}/${FILE_NAME} ] ; then
    wget ${BIN_URL} -P ${TEMP} >/dev/null 2>&1
  fi
  tar -xzvf ${TEMP}/${FILE_NAME} -C ${PATH_DEST}/${1} >/dev/null 2>&1
  if [ ${1} == "jira" ] ; then
    ln -fs "${PATH_DEST}/${1}/${FOLDER_NAME}-standalone" ${PATH_DEST}/${1}/current
  else
    ln -fs ${PATH_DEST}/${1}/${FOLDER_NAME} ${PATH_DEST}/${1}/current
  fi
  chown -R ${1}:${1} "${PATH_DEST}/${1}/current/"
}

function configTomcatProxy() {
  TOMCAT_CONFIG=$(find ${PATH_DEST}/${1} -name server.xml)
  if [ -f ${TOMCAT_CONFIG} ] ; then 
    xmlstarlet ed -L -PS -u "/Server/Service/Engine/Host/Context/@path" -v "/${1}" ${TOMCAT_CONFIG}
    if [ ! $(xmlstarlet sel -t -m Server/Service/Connector -v @proxyName ${TOMCAT_CONFIG})] ; then
      xmlstarlet ed -L -PS -s /Server/Service/Connector -t attr -n proxyName -v ${1}.${DOMAIN} ${TOMCAT_CONFIG}
      xmlstarlet ed -L -PS -s /Server/Service/Connector -t attr -n proxyPort -v 80 ${TOMCAT_CONFIG}
    fi
  fi
}

function setHomes() {
  if [ ${1} == "crowd" ]; then
    echo "${1}.home=${PATH_DATA}/${1}" > ${PATH_DEST}/${1}/current/${1}-webapp/WEB-INF/classes/${1}-init.properties
  elif [ ${1} == "confluence" ]; then
    echo "${1}.home=${PATH_DATA}/${1}" > ${PATH_DEST}/${1}/current/${1}/WEB-INF/classes/${1}-init.properties
  elif [ ${1} == "jira" ]; then
    echo "${1}.home=${PATH_DATA}/${1}" > ${PATH_DEST}/${1}/current/atlassian-${1}/WEB-INF/classes/${1}-application.properties
  fi
}

function setFixes() {
  if [ ${1} == "crowd" ] ; then
    if [ -f "${PATH_DEST}/crowd/current/apache-tomcat/bin/setenv.sh" ] ; then
      if [ ! $(grep CATALINA_PID "${PATH_DEST}/crowd/current/apache-tomcat/bin/setenv.sh") ] ; then
        cat >> ${PATH_DEST}/crowd/current/apache-tomcat/bin/setenv.sh << 'EOF'
# set the location of the pid file
if [ -z "$CATALINA_PID" ] ; then
    if [ -n "$CATALINA_BASE" ] ; then
        CATALINA_PID="$CATALINA_BASE"/work/catalina.pid
    elif [ -n "$CATALINA_HOME" ] ; then
        CATALINA_PID="$CATALINA_HOME"/work/catalina.pid
    fi
fi
export CATALINA_PID

PRGDIR=`dirname "$0"`
if [ -z "$CATALINA_BASE" ]; then
  if [ -z "$CATALINA_HOME" ]; then
    LOGBASE=$PRGDIR
    LOGTAIL=..
  else
    LOGBASE=$CATALINA_HOME
    LOGTAIL=.
  fi
else
  LOGBASE=$CATALINA_BASE
  LOGTAIL=.
fi

PUSHED_DIR=`pwd`
cd $LOGBASE
cd $LOGTAIL
LOGBASEABS=`pwd`
cd $PUSHED_DIR

echo ""
echo "Server startup logs are located in $LOGBASEABS/logs/catalina.out"
EOF
      fi
    fi
  fi
}

function createLogrotate() {
  echo "deployLatestBin"
}

function backupDatabase() { 
  if [ ${1} == "jira" ]; then
    APP_CONFIG=$(find ${PATH_DATA}/${1}/ -name dbconfig.xml)
    if [ ! "x${APP_CONFIG}" == "x" ] ; then
      MYSQL_PASSWORD=$(grep password ${APP_CONFIG} | cut -d">" -f2 | cut -d"<" -f1)
    fi
  elif [ ${1} == "stash" ]; then
    APP_CONFIG=$(find ${PATH_DATA}/${1}/ -name stash-config.properties)
    if [ ! "x${APP_CONFIG}" == "x" ] ; then
      MYSQL_PASSWORD=$(grep password ${APP_CONFIG} | cut -d"=" -f2)
    fi
  else
    APP_CONFIG=$(find ${PATH_DATA}/${1}/ -name ${1}.cfg.xml)
    if [ ! "x${APP_CONFIG}" == "x" ] ; then
      MYSQL_PASSWORD=$(grep hibernate.connection.password ${APP_CONFIG} | cut -d">" -f2 | cut -d"<" -f1)
    fi
  fi
  if [ ! "x${MYSQL_PASSWORD}" == "x" ] ; then
    mysqldump -u${1} -p${MYSQL_PASSWORD} ${1} > ${PATH_DATA}/${1}/${1}_database_backup.sql
    chown ${1}:${1} ${PATH_DATA}/${1}/${1}_database_backup.sql
  else
    echo "mysql password for ${1} cloud not be found, no database backup!"
  fi
  unset MYSQL_PASSWORD
}

function backupHome() {
  if [ -d "${PATH_DEST}/${1}" ] && [ -d ${PATH_BACKUP} ] ; then
    tar -zcf ${PATH_BACKUP}/${1}_backup_${TIMESTAMP}.tgz ${PATH_DEST}/${1} >/dev/null 2>&1
    rm -f ${PATH_DATA}/${1}/${1}_database_backup.sql >/dev/null 2>&1
    for FILE in $(ls ${PATH_BACKUP}/${1}_backup_*.tgz | head -n-${MAXBACKUPS}) ; do 
      rm -f ${FILE} >/dev/null 2>&1
    done
  fi
}

function deployInitScript() {
  if [ ! -f /etc/init.d/${1} ] ; then
    SCRIPT_START=$(find ${PATH_DEST}/${1}/current/ -name startup.sh)
    SCRIPT_STOP=$(find ${PATH_DEST}/${1}/current/ -name stop\*.sh)
    HELPER_VARIABLE='$1'
    cat >> /etc/init.d/${1} << EOF
#!/bin/sh -e
# ${1} startup script
#chkconfig: 2345 80 05
#description: ${1}
 
export JAVA_HOME=${PATH_DEST}/java/current
 
case "${HELPER_VARIABLE}" in
  # Start command
  start)
    echo "Starting ${1}"
    /bin/su ${1} -l -c "${SCRIPT_START} &> /dev/null"
    ;;
  # Stop command
  stop)
    echo "Stopping ${1}"
    /bin/su ${1} -l -c "${SCRIPT_STOP} &> /dev/null"
    echo " stopped successfully"
    ;;
  # Restart command
  restart)
    /etc/init.d/${1} stop
    sleep 5
    /etc/init.d/${1} start
    ;;
  *)
    echo "Usage: /etc/init.d/${1} {start|restart|stop}"
    exit 1
    ;;
esac
 
exit 0
EOF
    chmod +x /etc/init.d/${1} >/dev/null 2>&1
  fi
  if [ ${DISTRO} == "Ubuntu" ] || [ ${DISTRO} == "debian" ] ; then
    update-rc.d ${1} defaults >/dev/null 2>&1
  elif [ ${DISTRO} == "redhat" ] ; then
    chkconfig --add ${1} >/dev/null 2>&1
  fi
}

function purgeInitScript() {
  if [ -f /etc/init.d/${1} ] ; then
    rm -f /etc/init.d/${1}
  fi
}

function restoreLatestData() {
  NEWESTFILE=`ls | awk -F_ '{print $1 $2}' | sort -n -k 2,2 | tail -1`
  find ${FOLDER_BACKUP} -name ${BACKUP} -mtime ...
  tar -zxvf prog-1-jan-2005.tar.gz -C /home/jerry/prog
  filename="db_daily_"`eval date +%Y%m%d`".tgz"
}

#-----------------------------------------------------------------------------------------------------
# function calls
#-----------------------------------------------------------------------------------------------------
if [ ${JOB_UPDATE} -eq 1 ] ; then
  checkFilesystem
  checkNetwork
  deployLatestJava
  createCerts
  echo "UPDATE TEST"
fi

if [ ${JOB_INSTALL} -eq 1 ] ; then
  checkMemoryusage
  checkFilesystem
  checkNetwork
  deployLatestJava
  installTools
  installPostfix
  installApache
  createCerts
  installMySQL
  for APP in ${APPS}; do
    createDatabase ${APP}
    createFolders ${APP}
    createCredentials ${APP}
    setEnvirement ${APP}
    deployLatestBin ${APP}
    deployInitScript ${APP}
    deployDriverJDBC ${APP}
    configTomcatProxy ${APP}
    setHomes ${APP}
    setFixes ${APP}
    startApp ${APP}
    createVhost ${APP}
    echo "INSTALLED ${APP}"
  done
fi 

if [ ${JOB_BACKUP} -eq 1 ] ; then
  checkFilesystem
  for APP in ${APPS}; do
    stopApp ${APP}
    backupDatabase ${APP}
    backupHome ${APP}
    startApp ${APP}
  done
fi

if [ ${JOB_RESTORE} -eq 1 ] ; then
  checkFilesystem
  for APP in ${APPS}; do
    backupData ${APP}
  done
fi

if [ ${JOB_PURGE} -eq 1 ] ; then
  purgeJava
  for APP in ${APPS}; do
    stopApp ${APP}
    purgeCredentials ${APP}
    purgeFolders ${APP}
    purgeInitScript ${APP}
    purgeVhost ${APP}
    echo "PURGED ${APP}"
  done
fi

unset MYSQL_PASS
